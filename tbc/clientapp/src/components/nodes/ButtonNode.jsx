// clientapp/src/components/nodes/ButtonNode.jsx
import React, { useState } from 'react';
import { Handle, Position } from 'reactflow';
import InlineNodeEditor from '../InlineNodeEditor';
import './NodeStyles.css';

export default function ButtonNode({ id, data }) {
    const [editing, setEditing] = useState(false);

    // –ü–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const schemaFields = [
        { name: 'label', type: 'text', label: '–¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ' },
        {
            name: 'placement', type: 'select', label: '–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ', options: [
                { value: 'inline', label: '–í —Å—Ç—Ä–æ–∫–µ –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º' },
                { value: 'block', label: '–û—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º' }
            ]
        },
        { name: 'saveToDb', type: 'checkbox', label: '–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î' },
    ];

    const handleSave = upd => {
        data.onSave(id, upd);
        setEditing(false);
    };

    return (
        <div className="custom-node button-node" style={{ position: 'relative' }}>
            <div className="node-header">
                {/* –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–æ–∫ –∏–ª–∏ —Å—Ç–∞—Ç–∏—á–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å */}
                <span>üîò</span>
                <div className="node-actions">
                    <button onClick={() => setEditing(true)}>‚úé</button>
                    <button onClick={() => data.onDelete(id)}>‚úï</button>
                </div>
            </div>

            {/* –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–¥–µ—Å—å */}
            <div className={
                data.placement === 'inline'
                    ? 'button-preview inline'
                    : 'button-preview block'
            }>
                {data.label || 'Button'}
            </div>

            {editing && (
                <InlineNodeEditor
                    data={data}
                    schemaFields={schemaFields}
                    onSave={handleSave}
                    onCancel={() => setEditing(false)}
                />
            )}

            <Handle
                type="target"
                id="top"
                position={Position.Top}
                className="rect-handle"
            />
            <Handle
                type="source"
                id="bottom"
                position={Position.Bottom}
                className="rect-handle"
            />
            <Handle
                type="source"
                id="right"
                position={Position.Right}
                style={{ background: '#555' }}
            />
        </div>
    );
}
