// clientapp/src/components/BotManager.jsx
import React, { useState, useEffect } from 'react';
import NodeEditor from './NodeEditor';
import {
    listBots,
    createBot,
    deleteBot
} from '../api/botApi';
import {
    listSchemas,
    getSchema,
    postSchema
} from '../api/schemaApi';

export default function BotManager() {
    const [mode, setMode] = useState('list');      // 'list' | 'new' | 'edit'
    const [bots, setBots] = useState([]);
    const [selected, setSelected] = useState(null); // –≤—ã–±—Ä–∞–Ω–Ω—ã–π BotDto
    const [schema, setSchema] = useState({ nodes: [], edges: [] });
    const [name, setName] = useState('');
    const [token, setToken] = useState('');
    const [schemaVersions, setSchemaVersions] = useState([]);
    const [chosenVersion, setChosenVersion] = useState(null);

    useEffect(() => {
        refreshBots();
    }, []);

    async function refreshBots() {
        try {
            const list = await listBots();
            setBots(list);
        } catch (e) {
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±–æ—Ç–æ–≤: ' + e.message);
        }
    }

    // ========== –†–µ–∂–∏–º ¬´–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–≥–æ¬ª ==========
    const handleNew = () => {
        setName(''); setToken('');
        setSchema({ nodes: [], edges: [] });
        setMode('new');
    };

    const submitNew = async () => {
        try {
            const dto = await createBot({
                name,
                telegramToken: token,
                schema,
            });
            alert(`–ë–æ—Ç —Å–æ–∑–¥–∞–Ω (id=${dto.id})`);
            await refreshBots();
            setMode('list');
        } catch (e) {
            alert('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + e.message);
        }
    };

    // ========== –†–µ–∂–∏–º ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ ==========
    const openBot = async bot => {
        setSelected(bot);
        // –ó–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π —Å—Ö–µ–º
        const versions = await listSchemas(bot.id);
        setSchemaVersions(versions);
        setChosenVersion(versions[0]?.id ?? null);

        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è ‚Äî –∑–∞–≥—Ä—É–∑–∏—Ç—å –µ—ë
        if (versions.length > 0) {
            const loaded = await getSchema(bot.id, versions[0].id);
            setSchema(loaded);
        } else {
            setSchema({ nodes: [], edges: [] });
        }
        setMode('edit');
    };

    const saveEdit = async () => {
        if (!selected) return;
        try {
            const res = await postSchema(selected.id, schema);
            alert(`–°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ (–≤–µ—Ä—Å–∏—è id=${res.id})`);
            const versions = await listSchemas(selected.id);
            setSchemaVersions(versions);
            setChosenVersion(res.id);
        } catch (e) {
            alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ö–µ–º—ã: ' + e.message);
        }
    };

    const deleteSelectedBot = async bot => {
        if (!window.confirm(`–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞ "${bot.name}"?`)) return;
        try {
            await deleteBot(bot.id);
            await refreshBots();
            setMode('list');
        } catch (e) {
            alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + e.message);
        }
    };

    // ========== –†–µ–Ω–¥–µ—Ä ==========
    return (
        <div style={{ display: 'flex', height: '100%' }}>
            <div style={{ width: 240, padding: 16, borderRight: '1px solid #ccc' }}>
                {mode === 'list' && (
                    <>
                        <h2>–ë–æ—Ç—ã</h2>
                        <button onClick={handleNew}>+ –ù–æ–≤—ã–π –±–æ—Ç</button>
                        <ul>
                            {bots.map(b => (
                                <li key={b.id} style={{ margin: '8px 0' }}>
                                    <strong>{b.name}</strong> [{b.status}]
                                    <div style={{ marginTop: 4 }}>
                                        <button onClick={() => openBot(b)}>–û—Ç–∫—Ä—ã—Ç—å</button>{' '}
                                        <button onClick={() => deleteSelectedBot(b)}>–£–¥–∞–ª–∏—Ç—å</button>
                                    </div>
                                </li>
                            ))}
                        </ul>
                    </>
                )}

                {mode === 'new' && (
                    <>
                        <h2>–ù–æ–≤—ã–π –±–æ—Ç</h2>
                        <label>
                            –ò–º—è<br />
                            <input value={name} onChange={e => setName(e.target.value)} />
                        </label>
                        <br /><br />
                        <label>
                            Telegram-—Ç–æ–∫–µ–Ω<br />
                            <input value={token} onChange={e => setToken(e.target.value)} />
                        </label>
                        <br /><br />
                        <button onClick={() => setMode('list')}>‚Üê –û—Ç–º–µ–Ω–∞</button>{' '}
                        <button onClick={submitNew}>–°–æ–∑–¥–∞—Ç—å</button>
                    </>
                )}

                {mode === 'edit' && selected && (
                    <>
                        <h2>–ë–æ—Ç: {selected.name}</h2>
                        <button onClick={() => setMode('list')}>‚Üê –ù–∞–∑–∞–¥</button>
                        <button style={{ marginLeft: 8 }} onClick={saveEdit}>
                            üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ö–µ–º—É
                        </button>
                        <br /><br />
                        <label>
                            –í—ã–±—Ä–∞—Ç—å –≤–µ—Ä—Å–∏—é —Å—Ö–µ–º—ã:<br />
                            <select
                                value={chosenVersion || ''}
                                onChange={async e => {
                                    const vid = Number(e.target.value);
                                    setChosenVersion(vid);
                                    const loaded = await getSchema(selected.id, vid);
                                    setSchema(loaded);
                                }}
                            >
                                {schemaVersions.map(v => (
                                    <option key={v.id} value={v.id}>
                                        {v.id} ‚Äì {new Date(v.createdAt).toLocaleString()}
                                    </option>
                                ))}
                            </select>
                        </label>
                    </>
                )}
            </div>

            <div style={{ flex: 1, position: 'relative' }}>
                {(mode === 'new' || mode === 'edit') && (
                    <NodeEditor
                        initialSchema={schema}
                        onSchemaChange={setSchema}
                    />
                )}
            </div>
        </div>
    );
}
